{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Go microservice API for Quality Studio Server.",
        "title": "Quality Studio API",
        "contact": {
            "name": "Source Code",
            "url": "https://github.com/redhat-appstudio/quality-studio"
        },
        "license": {
            "name": "MIT License",
            "url": "https://github.com/redhat-appstudio/quality-studio/blob/main/LICENSE"
        },
        "version": "v1alpha"
    },
    "host": "127.0.0.1:9898",
    "basePath": "/api/quality/",
    "paths": {
        "/repositories/create": {
            "post": {
                "description": "returns the Server information as a JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Github Repositories API"
                ],
                "summary": "Github repositories info",
                "parameters": [
                    {
                        "description": "repository name",
                        "name": "repository",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repositories.GitRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Repository"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/repositories.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/delete": {
            "delete": {
                "description": "delete a given repository from a organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Github Repositories API"
                ],
                "summary": "Github repositories info",
                "parameters": [
                    {
                        "description": "repository name",
                        "name": "repository",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/repositories.GitRepositoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/repositories.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/repositories.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/repositories/list": {
            "get": {
                "description": "returns all repository information stored in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Github Repositories API"
                ],
                "summary": "Github repositories info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.RepositoryQualityInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/repositories.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/server/info": {
            "get": {
                "description": "returns the Server information as a JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server API"
                ],
                "summary": "API Server info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/version.Version"
                        }
                    }
                }
            }
        },
        "/workflows/get": {
            "get": {
                "description": "return github workflows from a given repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Github Workflows API"
                ],
                "summary": "Quality Repositories Workflow",
                "parameters": [
                    {
                        "type": "string",
                        "example": "string",
                        "description": "string example",
                        "name": "repository_name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/storage.GithubWorkflows"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/repositories.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.CodeCov": {
            "type": "object",
            "properties": {
                "coverage_percentage": {
                    "description": "CoveragePercentage holds the value of the \"coverage_percentage\" field.",
                    "type": "number"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CodeCovQuery when eager-loading is set.",
                    "$ref": "#/definitions/db.CodeCovEdges"
                },
                "git_organization": {
                    "description": "GitOrganization holds the value of the \"git_organization\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "repository_name": {
                    "description": "RepositoryName holds the value of the \"repository_name\" field.",
                    "type": "string"
                }
            }
        },
        "db.CodeCovEdges": {
            "type": "object",
            "properties": {
                "codecov": {
                    "description": "Codecov holds the value of the codecov edge.",
                    "$ref": "#/definitions/db.Repository"
                }
            }
        },
        "db.Repository": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the RepositoryQuery when eager-loading is set.",
                    "$ref": "#/definitions/db.RepositoryEdges"
                },
                "git_organization": {
                    "description": "GitOrganization holds the value of the \"git_organization\" field.",
                    "type": "string"
                },
                "git_url": {
                    "description": "GitURL holds the value of the \"git_url\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "repository_name": {
                    "description": "RepositoryName holds the value of the \"repository_name\" field.",
                    "type": "string"
                }
            }
        },
        "db.RepositoryEdges": {
            "type": "object",
            "properties": {
                "codecov": {
                    "description": "Codecov holds the value of the codecov edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.CodeCov"
                    }
                },
                "workflows": {
                    "description": "Workflows holds the value of the workflows edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.Workflows"
                    }
                }
            }
        },
        "db.Workflows": {
            "type": "object",
            "properties": {
                "badge_url": {
                    "description": "BadgeURL holds the value of the \"badge_url\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the WorkflowsQuery when eager-loading is set.",
                    "$ref": "#/definitions/db.WorkflowsEdges"
                },
                "html_url": {
                    "description": "HTMLURL holds the value of the \"html_url\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "job_url": {
                    "description": "JobURL holds the value of the \"job_url\" field.",
                    "type": "string"
                },
                "state": {
                    "description": "State holds the value of the \"state\" field.",
                    "type": "string"
                },
                "workflow_id": {
                    "description": "WorkflowID holds the value of the \"workflow_id\" field.",
                    "type": "string"
                },
                "workflow_name": {
                    "description": "WorkflowName holds the value of the \"workflow_name\" field.",
                    "type": "string"
                }
            }
        },
        "db.WorkflowsEdges": {
            "type": "object",
            "properties": {
                "workflows": {
                    "description": "Workflows holds the value of the workflows edge.",
                    "$ref": "#/definitions/db.Repository"
                }
            }
        },
        "repositories.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "The error message.\nRequired: true",
                    "type": "string"
                },
                "statusCode": {
                    "description": "The error message.\nRequired: false",
                    "type": "integer"
                }
            }
        },
        "repositories.GitRepositoryRequest": {
            "type": "object",
            "properties": {
                "artifacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "git_organization": {
                    "type": "string"
                },
                "jobs": {
                    "$ref": "#/definitions/repositories.JobSpec"
                },
                "repository_name": {
                    "type": "string"
                }
            }
        },
        "repositories.GithubActionsSpec": {
            "type": "object",
            "properties": {
                "monitor": {
                    "type": "boolean"
                }
            }
        },
        "repositories.JobSpec": {
            "type": "object",
            "properties": {
                "github_actions": {
                    "$ref": "#/definitions/repositories.GithubActionsSpec"
                },
                "openshift_ci": {
                    "$ref": "#/definitions/repositories.OpenshiftCISpec"
                }
            }
        },
        "repositories.OpenshiftCISpec": {
            "type": "object",
            "properties": {
                "monitor": {
                    "type": "boolean"
                }
            }
        },
        "repositories.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "The error message.\nRequired: true",
                    "type": "string"
                }
            }
        },
        "storage.Coverage": {
            "type": "object",
            "properties": {
                "coverage_percentage": {
                    "type": "number"
                },
                "git_organization": {
                    "type": "string"
                },
                "repository_name": {
                    "description": "RepositoryName identify an github repository",
                    "type": "string"
                }
            }
        },
        "storage.GithubWorkflows": {
            "type": "object",
            "properties": {
                "badge_url": {
                    "type": "string"
                },
                "html_url": {
                    "type": "string"
                },
                "job_url": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "workflow_name": {
                    "description": "RepositoryName identify an github repository",
                    "type": "string"
                }
            }
        },
        "storage.RepositoryQualityInfo": {
            "type": "object",
            "properties": {
                "code_coverage": {
                    "$ref": "#/definitions/storage.Coverage"
                },
                "description": {
                    "type": "string"
                },
                "git_organization": {
                    "type": "string"
                },
                "git_url": {
                    "type": "string"
                },
                "github_actions": {
                    "description": "Coverage",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.GithubWorkflows"
                    }
                },
                "repository_name": {
                    "description": "RepositoryName identify an github repository",
                    "type": "string"
                }
            }
        },
        "version.Version": {
            "type": "object",
            "properties": {
                "apiMaturity": {
                    "type": "string"
                },
                "buildDate": {
                    "type": "string"
                },
                "gitCommit": {
                    "type": "string"
                },
                "goArch": {
                    "type": "string"
                },
                "goOs": {
                    "type": "string"
                },
                "goVersion": {
                    "type": "string"
                },
                "serverAPIVersion": {
                    "type": "string"
                }
            }
        }
    }
}