// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowjobs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwJobsUpdate is the builder for updating ProwJobs entities.
type ProwJobsUpdate struct {
	config
	hooks    []Hook
	mutation *ProwJobsMutation
}

// Where appends a list predicates to the ProwJobsUpdate builder.
func (pju *ProwJobsUpdate) Where(ps ...predicate.ProwJobs) *ProwJobsUpdate {
	pju.mutation.Where(ps...)
	return pju
}

// SetJobID sets the "job_id" field.
func (pju *ProwJobsUpdate) SetJobID(s string) *ProwJobsUpdate {
	pju.mutation.SetJobID(s)
	return pju
}

// SetCreatedAt sets the "created_at" field.
func (pju *ProwJobsUpdate) SetCreatedAt(t time.Time) *ProwJobsUpdate {
	pju.mutation.SetCreatedAt(t)
	return pju
}

// SetDuration sets the "duration" field.
func (pju *ProwJobsUpdate) SetDuration(f float64) *ProwJobsUpdate {
	pju.mutation.ResetDuration()
	pju.mutation.SetDuration(f)
	return pju
}

// AddDuration adds f to the "duration" field.
func (pju *ProwJobsUpdate) AddDuration(f float64) *ProwJobsUpdate {
	pju.mutation.AddDuration(f)
	return pju
}

// SetTestsCount sets the "tests_count" field.
func (pju *ProwJobsUpdate) SetTestsCount(i int64) *ProwJobsUpdate {
	pju.mutation.ResetTestsCount()
	pju.mutation.SetTestsCount(i)
	return pju
}

// AddTestsCount adds i to the "tests_count" field.
func (pju *ProwJobsUpdate) AddTestsCount(i int64) *ProwJobsUpdate {
	pju.mutation.AddTestsCount(i)
	return pju
}

// SetFailedCount sets the "failed_count" field.
func (pju *ProwJobsUpdate) SetFailedCount(i int64) *ProwJobsUpdate {
	pju.mutation.ResetFailedCount()
	pju.mutation.SetFailedCount(i)
	return pju
}

// AddFailedCount adds i to the "failed_count" field.
func (pju *ProwJobsUpdate) AddFailedCount(i int64) *ProwJobsUpdate {
	pju.mutation.AddFailedCount(i)
	return pju
}

// SetSkippedCount sets the "skipped_count" field.
func (pju *ProwJobsUpdate) SetSkippedCount(i int64) *ProwJobsUpdate {
	pju.mutation.ResetSkippedCount()
	pju.mutation.SetSkippedCount(i)
	return pju
}

// AddSkippedCount adds i to the "skipped_count" field.
func (pju *ProwJobsUpdate) AddSkippedCount(i int64) *ProwJobsUpdate {
	pju.mutation.AddSkippedCount(i)
	return pju
}

// SetProwJobsID sets the "prow_jobs" edge to the Repository entity by ID.
func (pju *ProwJobsUpdate) SetProwJobsID(id uuid.UUID) *ProwJobsUpdate {
	pju.mutation.SetProwJobsID(id)
	return pju
}

// SetNillableProwJobsID sets the "prow_jobs" edge to the Repository entity by ID if the given value is not nil.
func (pju *ProwJobsUpdate) SetNillableProwJobsID(id *uuid.UUID) *ProwJobsUpdate {
	if id != nil {
		pju = pju.SetProwJobsID(*id)
	}
	return pju
}

// SetProwJobs sets the "prow_jobs" edge to the Repository entity.
func (pju *ProwJobsUpdate) SetProwJobs(r *Repository) *ProwJobsUpdate {
	return pju.SetProwJobsID(r.ID)
}

// Mutation returns the ProwJobsMutation object of the builder.
func (pju *ProwJobsUpdate) Mutation() *ProwJobsMutation {
	return pju.mutation
}

// ClearProwJobs clears the "prow_jobs" edge to the Repository entity.
func (pju *ProwJobsUpdate) ClearProwJobs() *ProwJobsUpdate {
	pju.mutation.ClearProwJobs()
	return pju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pju *ProwJobsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pju.hooks) == 0 {
		affected, err = pju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProwJobsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pju.mutation = mutation
			affected, err = pju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pju.hooks) - 1; i >= 0; i-- {
			if pju.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pju *ProwJobsUpdate) SaveX(ctx context.Context) int {
	affected, err := pju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pju *ProwJobsUpdate) Exec(ctx context.Context) error {
	_, err := pju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pju *ProwJobsUpdate) ExecX(ctx context.Context) {
	if err := pju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pju *ProwJobsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prowjobs.Table,
			Columns: prowjobs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		},
	}
	if ps := pju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pju.mutation.JobID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prowjobs.FieldJobID,
		})
	}
	if value, ok := pju.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prowjobs.FieldCreatedAt,
		})
	}
	if value, ok := pju.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: prowjobs.FieldDuration,
		})
	}
	if value, ok := pju.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: prowjobs.FieldDuration,
		})
	}
	if value, ok := pju.mutation.TestsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldTestsCount,
		})
	}
	if value, ok := pju.mutation.AddedTestsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldTestsCount,
		})
	}
	if value, ok := pju.mutation.FailedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldFailedCount,
		})
	}
	if value, ok := pju.mutation.AddedFailedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldFailedCount,
		})
	}
	if value, ok := pju.mutation.SkippedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldSkippedCount,
		})
	}
	if value, ok := pju.mutation.AddedSkippedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldSkippedCount,
		})
	}
	if pju.mutation.ProwJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pju.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prowjobs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProwJobsUpdateOne is the builder for updating a single ProwJobs entity.
type ProwJobsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProwJobsMutation
}

// SetJobID sets the "job_id" field.
func (pjuo *ProwJobsUpdateOne) SetJobID(s string) *ProwJobsUpdateOne {
	pjuo.mutation.SetJobID(s)
	return pjuo
}

// SetCreatedAt sets the "created_at" field.
func (pjuo *ProwJobsUpdateOne) SetCreatedAt(t time.Time) *ProwJobsUpdateOne {
	pjuo.mutation.SetCreatedAt(t)
	return pjuo
}

// SetDuration sets the "duration" field.
func (pjuo *ProwJobsUpdateOne) SetDuration(f float64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetDuration()
	pjuo.mutation.SetDuration(f)
	return pjuo
}

// AddDuration adds f to the "duration" field.
func (pjuo *ProwJobsUpdateOne) AddDuration(f float64) *ProwJobsUpdateOne {
	pjuo.mutation.AddDuration(f)
	return pjuo
}

// SetTestsCount sets the "tests_count" field.
func (pjuo *ProwJobsUpdateOne) SetTestsCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetTestsCount()
	pjuo.mutation.SetTestsCount(i)
	return pjuo
}

// AddTestsCount adds i to the "tests_count" field.
func (pjuo *ProwJobsUpdateOne) AddTestsCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.AddTestsCount(i)
	return pjuo
}

// SetFailedCount sets the "failed_count" field.
func (pjuo *ProwJobsUpdateOne) SetFailedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetFailedCount()
	pjuo.mutation.SetFailedCount(i)
	return pjuo
}

// AddFailedCount adds i to the "failed_count" field.
func (pjuo *ProwJobsUpdateOne) AddFailedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.AddFailedCount(i)
	return pjuo
}

// SetSkippedCount sets the "skipped_count" field.
func (pjuo *ProwJobsUpdateOne) SetSkippedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.ResetSkippedCount()
	pjuo.mutation.SetSkippedCount(i)
	return pjuo
}

// AddSkippedCount adds i to the "skipped_count" field.
func (pjuo *ProwJobsUpdateOne) AddSkippedCount(i int64) *ProwJobsUpdateOne {
	pjuo.mutation.AddSkippedCount(i)
	return pjuo
}

// SetProwJobsID sets the "prow_jobs" edge to the Repository entity by ID.
func (pjuo *ProwJobsUpdateOne) SetProwJobsID(id uuid.UUID) *ProwJobsUpdateOne {
	pjuo.mutation.SetProwJobsID(id)
	return pjuo
}

// SetNillableProwJobsID sets the "prow_jobs" edge to the Repository entity by ID if the given value is not nil.
func (pjuo *ProwJobsUpdateOne) SetNillableProwJobsID(id *uuid.UUID) *ProwJobsUpdateOne {
	if id != nil {
		pjuo = pjuo.SetProwJobsID(*id)
	}
	return pjuo
}

// SetProwJobs sets the "prow_jobs" edge to the Repository entity.
func (pjuo *ProwJobsUpdateOne) SetProwJobs(r *Repository) *ProwJobsUpdateOne {
	return pjuo.SetProwJobsID(r.ID)
}

// Mutation returns the ProwJobsMutation object of the builder.
func (pjuo *ProwJobsUpdateOne) Mutation() *ProwJobsMutation {
	return pjuo.mutation
}

// ClearProwJobs clears the "prow_jobs" edge to the Repository entity.
func (pjuo *ProwJobsUpdateOne) ClearProwJobs() *ProwJobsUpdateOne {
	pjuo.mutation.ClearProwJobs()
	return pjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pjuo *ProwJobsUpdateOne) Select(field string, fields ...string) *ProwJobsUpdateOne {
	pjuo.fields = append([]string{field}, fields...)
	return pjuo
}

// Save executes the query and returns the updated ProwJobs entity.
func (pjuo *ProwJobsUpdateOne) Save(ctx context.Context) (*ProwJobs, error) {
	var (
		err  error
		node *ProwJobs
	)
	if len(pjuo.hooks) == 0 {
		node, err = pjuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProwJobsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pjuo.mutation = mutation
			node, err = pjuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pjuo.hooks) - 1; i >= 0; i-- {
			if pjuo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pjuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pjuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pjuo *ProwJobsUpdateOne) SaveX(ctx context.Context) *ProwJobs {
	node, err := pjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pjuo *ProwJobsUpdateOne) Exec(ctx context.Context) error {
	_, err := pjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjuo *ProwJobsUpdateOne) ExecX(ctx context.Context) {
	if err := pjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pjuo *ProwJobsUpdateOne) sqlSave(ctx context.Context) (_node *ProwJobs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prowjobs.Table,
			Columns: prowjobs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		},
	}
	id, ok := pjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ProwJobs.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prowjobs.FieldID)
		for _, f := range fields {
			if !prowjobs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != prowjobs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pjuo.mutation.JobID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prowjobs.FieldJobID,
		})
	}
	if value, ok := pjuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: prowjobs.FieldCreatedAt,
		})
	}
	if value, ok := pjuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: prowjobs.FieldDuration,
		})
	}
	if value, ok := pjuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: prowjobs.FieldDuration,
		})
	}
	if value, ok := pjuo.mutation.TestsCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldTestsCount,
		})
	}
	if value, ok := pjuo.mutation.AddedTestsCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldTestsCount,
		})
	}
	if value, ok := pjuo.mutation.FailedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldFailedCount,
		})
	}
	if value, ok := pjuo.mutation.AddedFailedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldFailedCount,
		})
	}
	if value, ok := pjuo.mutation.SkippedCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldSkippedCount,
		})
	}
	if value, ok := pjuo.mutation.AddedSkippedCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: prowjobs.FieldSkippedCount,
		})
	}
	if pjuo.mutation.ProwJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pjuo.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProwJobs{config: pjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prowjobs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
