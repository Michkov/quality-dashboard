// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prow"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// Prow is the model entity for the Prow schema.
type Prow struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID string `json:"job_id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// Time holds the value of the "time" field.
	Time float64 `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProwQuery when eager-loading is set.
	Edges           ProwEdges `json:"edges"`
	repository_prow *uuid.UUID
}

// ProwEdges holds the relations/edges for other nodes in the graph.
type ProwEdges struct {
	// Prow holds the value of the prow edge.
	Prow *Repository `json:"prow,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProwOrErr returns the Prow value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProwEdges) ProwOrErr() (*Repository, error) {
	if e.loadedTypes[0] {
		if e.Prow == nil {
			// The edge prow was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: repository.Label}
		}
		return e.Prow, nil
	}
	return nil, &NotLoadedError{edge: "prow"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prow) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case prow.FieldTime:
			values[i] = new(sql.NullFloat64)
		case prow.FieldID:
			values[i] = new(sql.NullInt64)
		case prow.FieldJobID, prow.FieldName, prow.FieldStatus:
			values[i] = new(sql.NullString)
		case prow.ForeignKeys[0]: // repository_prow
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Prow", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prow fields.
func (pr *Prow) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case prow.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				pr.JobID = value.String
			}
		case prow.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case prow.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				pr.Status = value.String
			}
		case prow.FieldTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				pr.Time = value.Float64
			}
		case prow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field repository_prow", values[i])
			} else if value.Valid {
				pr.repository_prow = new(uuid.UUID)
				*pr.repository_prow = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryProw queries the "prow" edge of the Prow entity.
func (pr *Prow) QueryProw() *RepositoryQuery {
	return (&ProwClient{config: pr.config}).QueryProw(pr)
}

// Update returns a builder for updating this Prow.
// Note that you need to call Prow.Unwrap() before calling this method if this Prow
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prow) Update() *ProwUpdateOne {
	return (&ProwClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Prow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prow) Unwrap() *Prow {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("db: Prow is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prow) String() string {
	var builder strings.Builder
	builder.WriteString("Prow(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", job_id=")
	builder.WriteString(pr.JobID)
	builder.WriteString(", Name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", Status=")
	builder.WriteString(pr.Status)
	builder.WriteString(", time=")
	builder.WriteString(fmt.Sprintf("%v", pr.Time))
	builder.WriteByte(')')
	return builder.String()
}

// Prows is a parsable slice of Prow.
type Prows []*Prow

func (pr Prows) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
