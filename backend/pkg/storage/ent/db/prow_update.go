// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/predicate"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prow"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwUpdate is the builder for updating Prow entities.
type ProwUpdate struct {
	config
	hooks    []Hook
	mutation *ProwMutation
}

// Where appends a list predicates to the ProwUpdate builder.
func (pu *ProwUpdate) Where(ps ...predicate.Prow) *ProwUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetJobID sets the "job_id" field.
func (pu *ProwUpdate) SetJobID(s string) *ProwUpdate {
	pu.mutation.SetJobID(s)
	return pu
}

// SetName sets the "Name" field.
func (pu *ProwUpdate) SetName(s string) *ProwUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetStatus sets the "Status" field.
func (pu *ProwUpdate) SetStatus(s string) *ProwUpdate {
	pu.mutation.SetStatus(s)
	return pu
}

// SetTime sets the "time" field.
func (pu *ProwUpdate) SetTime(s string) *ProwUpdate {
	pu.mutation.SetTime(s)
	return pu
}

// SetProwID sets the "prow" edge to the Repository entity by ID.
func (pu *ProwUpdate) SetProwID(id uuid.UUID) *ProwUpdate {
	pu.mutation.SetProwID(id)
	return pu
}

// SetNillableProwID sets the "prow" edge to the Repository entity by ID if the given value is not nil.
func (pu *ProwUpdate) SetNillableProwID(id *uuid.UUID) *ProwUpdate {
	if id != nil {
		pu = pu.SetProwID(*id)
	}
	return pu
}

// SetProw sets the "prow" edge to the Repository entity.
func (pu *ProwUpdate) SetProw(r *Repository) *ProwUpdate {
	return pu.SetProwID(r.ID)
}

// Mutation returns the ProwMutation object of the builder.
func (pu *ProwUpdate) Mutation() *ProwMutation {
	return pu.mutation
}

// ClearProw clears the "prow" edge to the Repository entity.
func (pu *ProwUpdate) ClearProw() *ProwUpdate {
	pu.mutation.ClearProw()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProwUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProwMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProwUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProwUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProwUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProwUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prow.Table,
			Columns: prow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prow.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.JobID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldJobID,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldName,
		})
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldStatus,
		})
	}
	if value, ok := pu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldTime,
		})
	}
	if pu.mutation.ProwCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prow.ProwTable,
			Columns: []string{prow.ProwColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProwIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prow.ProwTable,
			Columns: []string{prow.ProwColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProwUpdateOne is the builder for updating a single Prow entity.
type ProwUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProwMutation
}

// SetJobID sets the "job_id" field.
func (puo *ProwUpdateOne) SetJobID(s string) *ProwUpdateOne {
	puo.mutation.SetJobID(s)
	return puo
}

// SetName sets the "Name" field.
func (puo *ProwUpdateOne) SetName(s string) *ProwUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetStatus sets the "Status" field.
func (puo *ProwUpdateOne) SetStatus(s string) *ProwUpdateOne {
	puo.mutation.SetStatus(s)
	return puo
}

// SetTime sets the "time" field.
func (puo *ProwUpdateOne) SetTime(s string) *ProwUpdateOne {
	puo.mutation.SetTime(s)
	return puo
}

// SetProwID sets the "prow" edge to the Repository entity by ID.
func (puo *ProwUpdateOne) SetProwID(id uuid.UUID) *ProwUpdateOne {
	puo.mutation.SetProwID(id)
	return puo
}

// SetNillableProwID sets the "prow" edge to the Repository entity by ID if the given value is not nil.
func (puo *ProwUpdateOne) SetNillableProwID(id *uuid.UUID) *ProwUpdateOne {
	if id != nil {
		puo = puo.SetProwID(*id)
	}
	return puo
}

// SetProw sets the "prow" edge to the Repository entity.
func (puo *ProwUpdateOne) SetProw(r *Repository) *ProwUpdateOne {
	return puo.SetProwID(r.ID)
}

// Mutation returns the ProwMutation object of the builder.
func (puo *ProwUpdateOne) Mutation() *ProwMutation {
	return puo.mutation
}

// ClearProw clears the "prow" edge to the Repository entity.
func (puo *ProwUpdateOne) ClearProw() *ProwUpdateOne {
	puo.mutation.ClearProw()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProwUpdateOne) Select(field string, fields ...string) *ProwUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prow entity.
func (puo *ProwUpdateOne) Save(ctx context.Context) (*Prow, error) {
	var (
		err  error
		node *Prow
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProwMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProwUpdateOne) SaveX(ctx context.Context) *Prow {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProwUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProwUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProwUpdateOne) sqlSave(ctx context.Context) (_node *Prow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prow.Table,
			Columns: prow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prow.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Prow.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prow.FieldID)
		for _, f := range fields {
			if !prow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != prow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.JobID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldJobID,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldName,
		})
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldStatus,
		})
	}
	if value, ok := puo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldTime,
		})
	}
	if puo.mutation.ProwCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prow.ProwTable,
			Columns: []string{prow.ProwColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProwIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prow.ProwTable,
			Columns: []string{prow.ProwColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prow{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
