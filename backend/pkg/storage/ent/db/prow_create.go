// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prow"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwCreate is the builder for creating a Prow entity.
type ProwCreate struct {
	config
	mutation *ProwMutation
	hooks    []Hook
}

// SetJobID sets the "job_id" field.
func (pc *ProwCreate) SetJobID(s string) *ProwCreate {
	pc.mutation.SetJobID(s)
	return pc
}

// SetName sets the "Name" field.
func (pc *ProwCreate) SetName(s string) *ProwCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetStatus sets the "Status" field.
func (pc *ProwCreate) SetStatus(s string) *ProwCreate {
	pc.mutation.SetStatus(s)
	return pc
}

// SetTime sets the "time" field.
func (pc *ProwCreate) SetTime(f float64) *ProwCreate {
	pc.mutation.SetTime(f)
	return pc
}

// SetProwID sets the "prow" edge to the Repository entity by ID.
func (pc *ProwCreate) SetProwID(id uuid.UUID) *ProwCreate {
	pc.mutation.SetProwID(id)
	return pc
}

// SetNillableProwID sets the "prow" edge to the Repository entity by ID if the given value is not nil.
func (pc *ProwCreate) SetNillableProwID(id *uuid.UUID) *ProwCreate {
	if id != nil {
		pc = pc.SetProwID(*id)
	}
	return pc
}

// SetProw sets the "prow" edge to the Repository entity.
func (pc *ProwCreate) SetProw(r *Repository) *ProwCreate {
	return pc.SetProwID(r.ID)
}

// Mutation returns the ProwMutation object of the builder.
func (pc *ProwCreate) Mutation() *ProwMutation {
	return pc.mutation
}

// Save creates the Prow in the database.
func (pc *ProwCreate) Save(ctx context.Context) (*Prow, error) {
	var (
		err  error
		node *Prow
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProwMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProwCreate) SaveX(ctx context.Context) *Prow {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProwCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProwCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProwCreate) check() error {
	if _, ok := pc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "job_id"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`db: missing required field "Name"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`db: missing required field "Status"`)}
	}
	if _, ok := pc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`db: missing required field "time"`)}
	}
	return nil
}

func (pc *ProwCreate) sqlSave(ctx context.Context) (*Prow, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *ProwCreate) createSpec() (*Prow, *sqlgraph.CreateSpec) {
	var (
		_node = &Prow{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prow.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prow.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.JobID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldJobID,
		})
		_node.JobID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: prow.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: prow.FieldTime,
		})
		_node.Time = value
	}
	if nodes := pc.mutation.ProwIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prow.ProwTable,
			Columns: []string{prow.ProwColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_prow = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProwCreateBulk is the builder for creating many Prow entities in bulk.
type ProwCreateBulk struct {
	config
	builders []*ProwCreate
}

// Save creates the Prow entities in the database.
func (pcb *ProwCreateBulk) Save(ctx context.Context) ([]*Prow, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Prow, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProwMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProwCreateBulk) SaveX(ctx context.Context) []*Prow {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProwCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProwCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
