// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/prowjobs"
	"github.com/redhat-appstudio/quality-studio/pkg/storage/ent/db/repository"
)

// ProwJobsCreate is the builder for creating a ProwJobs entity.
type ProwJobsCreate struct {
	config
	mutation *ProwJobsMutation
	hooks    []Hook
}

// SetJobID sets the "job_id" field.
func (pjc *ProwJobsCreate) SetJobID(s string) *ProwJobsCreate {
	pjc.mutation.SetJobID(s)
	return pjc
}

// SetCreatedAt sets the "created_at" field.
func (pjc *ProwJobsCreate) SetCreatedAt(t time.Time) *ProwJobsCreate {
	pjc.mutation.SetCreatedAt(t)
	return pjc
}

// SetDuration sets the "duration" field.
func (pjc *ProwJobsCreate) SetDuration(f float64) *ProwJobsCreate {
	pjc.mutation.SetDuration(f)
	return pjc
}

// SetTestsCount sets the "tests_count" field.
func (pjc *ProwJobsCreate) SetTestsCount(i int64) *ProwJobsCreate {
	pjc.mutation.SetTestsCount(i)
	return pjc
}

// SetFailedCount sets the "failed_count" field.
func (pjc *ProwJobsCreate) SetFailedCount(i int64) *ProwJobsCreate {
	pjc.mutation.SetFailedCount(i)
	return pjc
}

// SetSkippedCount sets the "skipped_count" field.
func (pjc *ProwJobsCreate) SetSkippedCount(i int64) *ProwJobsCreate {
	pjc.mutation.SetSkippedCount(i)
	return pjc
}

// SetJobName sets the "job_name" field.
func (pjc *ProwJobsCreate) SetJobName(s string) *ProwJobsCreate {
	pjc.mutation.SetJobName(s)
	return pjc
}

// SetJobType sets the "job_type" field.
func (pjc *ProwJobsCreate) SetJobType(s string) *ProwJobsCreate {
	pjc.mutation.SetJobType(s)
	return pjc
}

// SetState sets the "state" field.
func (pjc *ProwJobsCreate) SetState(s string) *ProwJobsCreate {
	pjc.mutation.SetState(s)
	return pjc
}

// SetJobURL sets the "job_url" field.
func (pjc *ProwJobsCreate) SetJobURL(s string) *ProwJobsCreate {
	pjc.mutation.SetJobURL(s)
	return pjc
}

// SetCiFailed sets the "ci_failed" field.
func (pjc *ProwJobsCreate) SetCiFailed(i int16) *ProwJobsCreate {
	pjc.mutation.SetCiFailed(i)
	return pjc
}

// SetProwJobsID sets the "prow_jobs" edge to the Repository entity by ID.
func (pjc *ProwJobsCreate) SetProwJobsID(id uuid.UUID) *ProwJobsCreate {
	pjc.mutation.SetProwJobsID(id)
	return pjc
}

// SetNillableProwJobsID sets the "prow_jobs" edge to the Repository entity by ID if the given value is not nil.
func (pjc *ProwJobsCreate) SetNillableProwJobsID(id *uuid.UUID) *ProwJobsCreate {
	if id != nil {
		pjc = pjc.SetProwJobsID(*id)
	}
	return pjc
}

// SetProwJobs sets the "prow_jobs" edge to the Repository entity.
func (pjc *ProwJobsCreate) SetProwJobs(r *Repository) *ProwJobsCreate {
	return pjc.SetProwJobsID(r.ID)
}

// Mutation returns the ProwJobsMutation object of the builder.
func (pjc *ProwJobsCreate) Mutation() *ProwJobsMutation {
	return pjc.mutation
}

// Save creates the ProwJobs in the database.
func (pjc *ProwJobsCreate) Save(ctx context.Context) (*ProwJobs, error) {
	return withHooks[*ProwJobs, ProwJobsMutation](ctx, pjc.sqlSave, pjc.mutation, pjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pjc *ProwJobsCreate) SaveX(ctx context.Context) *ProwJobs {
	v, err := pjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjc *ProwJobsCreate) Exec(ctx context.Context) error {
	_, err := pjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjc *ProwJobsCreate) ExecX(ctx context.Context) {
	if err := pjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pjc *ProwJobsCreate) check() error {
	if _, ok := pjc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`db: missing required field "ProwJobs.job_id"`)}
	}
	if _, ok := pjc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "ProwJobs.created_at"`)}
	}
	if _, ok := pjc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`db: missing required field "ProwJobs.duration"`)}
	}
	if _, ok := pjc.mutation.TestsCount(); !ok {
		return &ValidationError{Name: "tests_count", err: errors.New(`db: missing required field "ProwJobs.tests_count"`)}
	}
	if _, ok := pjc.mutation.FailedCount(); !ok {
		return &ValidationError{Name: "failed_count", err: errors.New(`db: missing required field "ProwJobs.failed_count"`)}
	}
	if _, ok := pjc.mutation.SkippedCount(); !ok {
		return &ValidationError{Name: "skipped_count", err: errors.New(`db: missing required field "ProwJobs.skipped_count"`)}
	}
	if _, ok := pjc.mutation.JobName(); !ok {
		return &ValidationError{Name: "job_name", err: errors.New(`db: missing required field "ProwJobs.job_name"`)}
	}
	if _, ok := pjc.mutation.JobType(); !ok {
		return &ValidationError{Name: "job_type", err: errors.New(`db: missing required field "ProwJobs.job_type"`)}
	}
	if _, ok := pjc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`db: missing required field "ProwJobs.state"`)}
	}
	if _, ok := pjc.mutation.JobURL(); !ok {
		return &ValidationError{Name: "job_url", err: errors.New(`db: missing required field "ProwJobs.job_url"`)}
	}
	if _, ok := pjc.mutation.CiFailed(); !ok {
		return &ValidationError{Name: "ci_failed", err: errors.New(`db: missing required field "ProwJobs.ci_failed"`)}
	}
	return nil
}

func (pjc *ProwJobsCreate) sqlSave(ctx context.Context) (*ProwJobs, error) {
	if err := pjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pjc.mutation.id = &_node.ID
	pjc.mutation.done = true
	return _node, nil
}

func (pjc *ProwJobsCreate) createSpec() (*ProwJobs, *sqlgraph.CreateSpec) {
	var (
		_node = &ProwJobs{config: pjc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: prowjobs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: prowjobs.FieldID,
			},
		}
	)
	if value, ok := pjc.mutation.JobID(); ok {
		_spec.SetField(prowjobs.FieldJobID, field.TypeString, value)
		_node.JobID = value
	}
	if value, ok := pjc.mutation.CreatedAt(); ok {
		_spec.SetField(prowjobs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pjc.mutation.Duration(); ok {
		_spec.SetField(prowjobs.FieldDuration, field.TypeFloat64, value)
		_node.Duration = value
	}
	if value, ok := pjc.mutation.TestsCount(); ok {
		_spec.SetField(prowjobs.FieldTestsCount, field.TypeInt64, value)
		_node.TestsCount = value
	}
	if value, ok := pjc.mutation.FailedCount(); ok {
		_spec.SetField(prowjobs.FieldFailedCount, field.TypeInt64, value)
		_node.FailedCount = value
	}
	if value, ok := pjc.mutation.SkippedCount(); ok {
		_spec.SetField(prowjobs.FieldSkippedCount, field.TypeInt64, value)
		_node.SkippedCount = value
	}
	if value, ok := pjc.mutation.JobName(); ok {
		_spec.SetField(prowjobs.FieldJobName, field.TypeString, value)
		_node.JobName = value
	}
	if value, ok := pjc.mutation.JobType(); ok {
		_spec.SetField(prowjobs.FieldJobType, field.TypeString, value)
		_node.JobType = value
	}
	if value, ok := pjc.mutation.State(); ok {
		_spec.SetField(prowjobs.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := pjc.mutation.JobURL(); ok {
		_spec.SetField(prowjobs.FieldJobURL, field.TypeString, value)
		_node.JobURL = value
	}
	if value, ok := pjc.mutation.CiFailed(); ok {
		_spec.SetField(prowjobs.FieldCiFailed, field.TypeInt16, value)
		_node.CiFailed = value
	}
	if nodes := pjc.mutation.ProwJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prowjobs.ProwJobsTable,
			Columns: []string{prowjobs.ProwJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: repository.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repository_prow_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProwJobsCreateBulk is the builder for creating many ProwJobs entities in bulk.
type ProwJobsCreateBulk struct {
	config
	builders []*ProwJobsCreate
}

// Save creates the ProwJobs entities in the database.
func (pjcb *ProwJobsCreateBulk) Save(ctx context.Context) ([]*ProwJobs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pjcb.builders))
	nodes := make([]*ProwJobs, len(pjcb.builders))
	mutators := make([]Mutator, len(pjcb.builders))
	for i := range pjcb.builders {
		func(i int, root context.Context) {
			builder := pjcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProwJobsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pjcb *ProwJobsCreateBulk) SaveX(ctx context.Context) []*ProwJobs {
	v, err := pjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pjcb *ProwJobsCreateBulk) Exec(ctx context.Context) error {
	_, err := pjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pjcb *ProwJobsCreateBulk) ExecX(ctx context.Context) {
	if err := pjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
